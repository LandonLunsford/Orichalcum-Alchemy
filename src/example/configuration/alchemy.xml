<?xml version="1.0" encoding="utf-8" ?>
<!--
	Example XML-configured alchemy mappings
	
	Class IDs are written using "package.name::Class" notation.
	Custom IDs are written using "custom.namespace.member" notation.
	
	MOVE TO EXAMPLE PROJECT ON GITHUB ?
-->
<alchemy>

	<!--
		Value Mappings
		AS3:	alchemist.map('example.value').to(3.14);
	-->
	<map id="example.value" to="3.14"/>
	<map id="example.value2" to-value="3.14"/>

	<!--
		Reference Mappings
		AS3:	alchemist.map('example.reference').toReference('example.value');
	-->
	<map id="example.reference" to="{example.value}"/>
	<map id="example.reference2" to-reference="example.value"/>

	<!--
		Singleton Mappings
		AS3:	alchemist.map(Singleton).asSingleton();
			alchemist.map('example.singleton-instance').toSingleton(Singleton);
	-->
	<map id="example::Singleton" to-provider="singleton"/>
	<map id="example.singleton-instance" to-singleton="example::Singleton"/>

	<!--
		Prototype Mappings
		AS3:	alchemist.map(Prototype).asPrototype();
			alchemist.map('example.prototype-instance').toPrototype(Prototype);
	-->
	<map id="example::Prototype" to-provider="prototype"/>
	<map id="example.prototype-instance" to-prototype="example::Prototype"/>

	<!--
		Pool Mappings
		AS3:	alchemist.map(Pool).asPool();
			alchemist.map('example.pooled-instance').toPool(Pool);
	-->
	<map id="example::Pool" to-provider="pool"/>
	<map id="example.pooled-instance" to-pool="example::Pool"/>

	<!--
		Provider Mapping
		AS3:	alchemist.map(Provision).toProvider(new Provider);
		Note:	the active alchemist will conjure the class provided in "to-provider" so you may map it if you like.
	-->
	<map id="example::Provision" to-provider="example::Provider"/>

	<!--
		Factory Mapping
		AS3:	alchemist.map(Provision).toFactory(Factory.functionName);
	-->
	<map id="example::Provision" to-factory="example::Factory#functionName"/><!-- AS doc style -->

	<!--
		AbstractClass Mapping
		AS3:	alchemist.map(AbstractClass).toReference(ConcreteClass);
	-->
	<map id="example::AbstractClass" to-reference="example::ConcreteClass"/>

	<!--
		Interface Mapping
		AS3:	alchemist.map(Interface).toReference(Implementation);
	-->
	<map id="example.package::Interface" to-reference="example::Implementation"/>

	<!--
		Recipe Mapping
		AS3:	alchemist.map(Matrix)
				.withConstructorArgument(1)
				.withConstructorArgument(reference('orichalcum.example.reference'))
				.withProperty('c', 2)
				.withProperty('d', reference('orichalcum.example.reference'))
				.withPostConstruct('inverse')
				.withPreDestroy('identity')
	-->
	<map id="flash.geom::Matrix">

		<!-- Constructor Argument Value Mapping -->
		<constructor-argument value="1"/>

		<!-- Constructor Argument Reference Mapping -->
		<constructor-argument value="{example.reference}"/>

		<!-- Property Value Mapping -->
		<property c="2"/>

		<!-- Property Reference Mapping -->
		<property d="{example.reference}"/>

		<!-- PostConstruct Mapping -->
		<post-construct name="invert"/>

		<!-- PreDestroy Mapping -->
		<pre-destroy name="identity"/>
	</map>

	<!--
		Recipe Mapping with Event Handlers
		(You probably wont find yourself using this much but it was made available anyway)
		Note:	MainViewMediator implements IEventDispatcher
			MainView extends Sprite
		AS3:
		Method 1 (Runtime configuration):
			
			alchemist.map(MainViewMediator)
				.withProperty('view', type(MainView))
				.withEventHandler('complete', 'onComplete')
				.withEventHandler('click', 'view_onClick', 'view')
				.withEventHandler('mouseover', 'view_onMouseOver', 'view')
				.withEventHandler('mouseout', 'view_mouseOutHandler', 'view')
				.withEventHandler('mousedown', 'view_mouseDownHandler', 'view')
				.withEventHandler('mouseup', 'view_mouseUpHandler', 'view')
				.withEventHandler('mousewheel', 'view_mouseWheelHandler', 'view')
				
		Method 2 (Compiletime configuration):
		
		public class MainViewMediator
		{
			[Inject]
			public var view:MainView;
			
			[EventHander(event="complete")]
			public function completeHandler():void {}
			
			[EventHander(event="click", target="view")]
			public function view_clickHandler():void {}
			
			[EventHander(event="mouseover", target="view", parameters="mouseX,mouseY")]
			public function view_mouseOverHandler(mouseX:Number, mouseY:Number):void {}
			
			[EventHander(event="mouseout", target="view", priority="5")]
			public function view_mouseOutHandler():void {}
			
			[EventHander(event="mousedown", target="view", useCapture)]
			public function view_mouseDownHandler():void {}
			
			[EventHander(event="mouseup", target="view", stopPropagation)]
			public function view_mouseUpHandler():void {}
			
			[EventHander(event="mousewheel", target="view", stopImmediatePropagation)]
			public function view_mouseWheelHandler():void {}
		}
	-->
	<map id="orichalcum.example::MainViewMediator">
		
		<!-- Type-Reference Mapping -->
		<property view="{example::MainView}"/>
		
		<!--
			EventHandler Mapping with target equal to this
			identical to <event-handler this.complete="completeHandler"/>
		-->
		<event-handler complete="completeHandler"/>
		
		<!-- EventHandler Mapping with target equal to view -->
		<event-handler view.click="view_clickHandler"/>
		
		<!-- EventHandler Mapping with Custom Parameters -->
		<event-handler view.mouseover="view_mouseOverHandler(mouseX,mouseY)"/>
		
		<!-- EventHandler Mapping with priority -->
		<event-handler view.mouseout="view_mouseOutHandler" priority="5"/>
		
		<!-- EventHandler Mapping with useCapture -->
		<event-handler view.mousedown="view_mouseDownHandler" useCapture="true"/>
		
		<!-- EventHandler Mapping with stopPropagation -->
		<event-handler view.mouseup="view_mouseUpHandler" stopPropagation="true"/>
		
		<!-- EventHandler Mapping with stopImmediatePropagation -->
		<event-handler view.mousewheel="view_mouseWheelHandler" stopImmediatePropagation="true"/>
		
	</map>

</alchemy>
